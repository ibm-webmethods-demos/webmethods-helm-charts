# Default values for webmethods-apigateway.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: ghcr.io/softwareag-government-solutions
  repository: webmethods-apigateway
  pullPolicy: IfNotPresent
  tag: 10.11-latest

## image pull secrets
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

# dict of envs
envConfigs: {}
envSecretConfigs: {}

# we have to setup 2 different service, because 1 is sticky, not the other...
service:
  gwruntime:
    type: ClusterIP
    port: 5555
    targetPort: gwruntime
    annotations: {}
  gwui:
    type: ClusterIP
    port: 9072
    targetPort: gwui
    annotations: {}

containerPorts:
  - containerPort: 5555
    name: gwruntime
    protocol: TCP
  - containerPort: 5543
    name: gwruntimessl
    protocol: TCP
  - containerPort: 9072
    name: gwui
    protocol: TCP
  - containerPort: 9073
    name: gwuissl
    protocol: TCP

## tenant id for the gateway
tenantId: apigateway

## connectivity to external elastic search
externalElastic:
  enabled: false
  uri: http://elasticserver:9200
  username: ""
  passwordSecret: {}
    # name: ""
    # key: ""

## connectivity to external kibana
externalKibana:
  enabled: false
  uri: http://kibanaserver:5601

## type of clustering - possible values: none (default), terracotta, ignite
## if clustering.type = terracotta, Terracotta dict entry is used
## if clustering.type = ignite, ignite dict entry is used
clustering:
  type: none
  name: APIGatewayCluster
  sessionTimeout: 60
  actionOnStartupError: shutdown
  connectTimeout: 300000
  healthCheck: true
  terracotta:
    url: changeme1:9510,changeme2:9510
  ignite:
    discoveryPort: 47100
    communicationPort: 47500
    portRange: 0

# complete full configs for apigateway external configurations (overrides all other)
fullConfigs: {}

# if full configs is not defined, then it's a combination of the common configs + clustering configs per variables below
# we default this to some sensible (but generally not production ready) default values (ie. if elasticsearch is part of the image), 
# and each items can simply be overwritten with env variables as needed following the expected env var format...
# example of env var overwrite for an external Elastic/kibana cluster:
      # apigw_elasticsearch_hosts: external_es:9200
      # apigw_elasticsearch_autostart: "false"
      # apigw_kibana_autostart: "false"
      # apigw_kibana_dashboardInstance: http://external_kibana:5601

commonConfigs:
  apigw:
    elasticsearch:
      hosts: localhost:9240
      autostart: true
      http:
        keepAlive: true
        keepAliveMaxConnections: 10
        keepAliveMaxConnectionsPerRoute: 100
        connectionTimeout: 1000
        socketTimeout: 10000
        maxRetryTimeout: 100000
      https:
        enabled: false
        enforceHostnameVerification: false
        # keystoreFilepath: "{{ webmethods_apigateway_keystore_filepath }}"
        # truststoreFilepath: "{{ webmethods_apigateway_truststore_filepath }}"
        # keystoreAlias: "{{ webmethods_apigateway_keystore_keyalias }}"
        # keystorePassword: "{{ webmethods_apigateway_keystore_password }}"
        # truststorePassword: "{{ webmethods_apigateway_truststore_password }}"
      sniff:
        enable: false
        timeInterval: 1000
      outboundProxy:
        enabled: false
        alias: somealias
      clientHttpResponseSize: 1001231
    kibana:
      dashboardInstance: http://localhost:9405
      autostart: true

# wait for elastic search availability via init container
waitforelastic:
  enabled: false
  image:
    registry: 
    repository: curlimages/curl
    tag: "7.81.0"
    pullPolicy: IfNotPresent
     
# the licensing needed for the product
licenseSecret: {}
  # name: ""
  # key: ""
  # path: ""

licenseTerracottaSecret: {}
  # name: ""
  # key: ""
  # path: ""

ingress:
  gwruntime:
    enabled: false
    annotations: {}
    host: chart-example.local
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    paths:
      - path: /gateway
        pathType: Prefix
      - path: /rest
        pathType: Prefix
      - path: /invoke
        pathType: Prefix
      - path: /WmAPIGateway
        pathType: Prefix
  gwui:
    enabled: false
    annotations: {}
    host: chart-example.local
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    paths:
      - path: /
        pathType: Prefix
  custom:
    enabled: false
    annotations: {}
    hosts:
      - host: chart-example.local
        paths: []
          # - path: /
          #   pathType: Prefix
          #   backendServiceName: someservice
          #   backendServicePort: 5555
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}