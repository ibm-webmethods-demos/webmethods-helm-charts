# Default values for webmethods-apigateway.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## tenant id for the gateway
integrationServerInstanceName: default

## number of replicas if autoscaling is not enabled
replicaCount: 1

## autoscaling (disabled by default)
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## SAGGS image
image:
  registry: ghcr.io/sag-gov-integration-unit
  repository: webmethods-apigateway
  pullPolicy: IfNotPresent
  tag: 10.15-latest

## image pull secrets
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

# use enhance helathcheck from the SAGGS images
advancedHealthCheck: false

# dict of envs
envConfigs: {}
envSecretConfigs: {}

# we have to setup 2 different service, because 1 is sticky, not the other...
service:
  gwruntime:
    type: ClusterIP
    port: 5555
    targetPort: gwruntime
    annotations: {}
  # gwruntimessl:
  #   type: ClusterIP
  #   port: 5543
  #   targetPort: gwruntimessl
  #   annotations: {}
  gwui:
    type: ClusterIP
    port: 9072
    targetPort: gwui
    annotations: {}
  # gwuissl:
  #   type: ClusterIP
  #   port: 9073
  #   targetPort: gwuissl
  #   annotations: {}
  ## isruntime is generally the same as gwruntime
  ## But could be useful to set if it was set to a different port from the gw api runtime
  # isruntime:
  #   type: ClusterIP
  #   port: 6655
  #   targetPort: isruntime
  #   annotations: {}

## ports exposed by the container
containerPorts:
  gwruntime: 5555
  gwruntimessl: 5543
  gwui: 9072
  gwuissl: 9073
  diag: 9999
  ## isruntime is generally the same as gwruntime
  ## But could be useful to set if it was set to a different port from the gw api runtime
  # isruntime: 5555

## connectivity to external elastic search
connectElasticSearch:
  enabled: false
  configsExistingSecrets: []
    # apigw_elasticsearch_http_password:
    #   secretName:
    #   secretKey:  
  configs: |-
    apigw:
      elasticsearch:
        tenantId: apigateway
        hosts: elasticserver:9200
        autostart: false
        http:
          username: elastic
          keepAlive: true
          keepAliveMaxConnections: 10
          keepAliveMaxConnectionsPerRoute: 100
          connectionTimeout: 1000
          socketTimeout: 10000
          maxRetryTimeout: 100000
        https:
          enabled: false
          enforceHostnameVerification: false
        sniff:
          enable: false
          timeInterval: 1000
        outboundProxy:
          enabled: false
          alias: somealias
        clientHttpResponseSize: 1001231

connectAnalyticsDataStore:
  enabled: false
  configsExistingSecrets: []
    # apigw_analyticsdatastore_http_password:
    #   secretName:
    #   secretKey:
  configs: |-
    apigw:
      analyticsdatastore:
        tenantId: apigateway
        hosts: elasticserver:9200
        autostart: false
        http:
          username: elastic
          keepAlive: true
          keepAliveMaxConnections: 10
          keepAliveMaxConnectionsPerRoute: 100
          connectionTimeout: 1000
          socketTimeout: 10000
          maxRetryTimeout: 100000
        https:
          enabled: false
          enforceHostnameVerification: false
        sniff:
          enable: false
          timeInterval: 1000
        outboundProxy:
          enabled: false
          alias: somealias
        clientHttpResponseSize: 1001231

## connectivity to external kibana
connectKibana:
  enabled: false
  configs: |-
    apigw:
      kibana:
        dashboardInstance: http://kibanaserver:5601
        autostart: true

## type of clustering - possible values: none (default), terracotta, ignite
## if clustering.type = terracotta, Terracotta dict entry is used
## if clustering.type = ignite, ignite dict entry is used
clustering:
  type: none
  name: APIGatewayCluster
  sessionTimeout: 60
  actionOnStartupError: shutdown
  connectTimeout: 300000
  healthCheck: true
  terracotta:
    url: changeme1:9510,changeme2:9510
  ignite:
    discoveryPort: 47100
    communicationPort: 47500
    portRange: 0

# complete full configs for apigateway external configurations (overrides all other)
fullConfigs: {}

# wait for elastic search availability via init container
# info here should probably be the same as to what's in connectElasticSearch...
# but have to defined what happens if connectElasticSearch.hosts is a multi-value field??
# in the meantime, let's leave the ability to specify uri and user/password here
waitforelastic:
  enabled: false
  uri: "http://es:9200"
  # username: ""
  # usernameSecret:
  #   # name: ""
  #   # key: ""
  # passwordSecret:
  #   # name: ""
  #   # key: ""
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
      - ALL
  image:
    registry: 
    repository: curlimages/curl
    tag: "7.81.0"
    pullPolicy: IfNotPresent

# the licensing needed for the product
licenseSecret: {}
  # name: ""
  # key: ""
  # path: ""

licenseTerracottaSecret: {}
  # name: ""
  # key: ""
  # path: ""

ingress:
  gwruntime:
    enabled: false
    annotations: {}
    host: webmethods-apigateway.local
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    paths:
      - path: /gateway/
        pathType: Prefix
      - path: /rest/
        pathType: Prefix
      - path: /invoke/
        pathType: Prefix
      - path: /WmAPIGateway/
        pathType: Prefix
  gwui:
    enabled: false
    annotations: {}
    host: webmethods-apigateway.local
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    paths:
      - path: /apigatewayui/
        pathType: Prefix
  isruntime:
    enabled: false
    annotations: {}
    host: webmethods-apigateway-isruntime.local
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    paths:
      - path: /
        pathType: Prefix
  # custom:
  #   enabled: false
  #   annotations: {}
  #   hosts:
  #     - host: chart-example.local
  #       paths: []
  #         # - path: /
  #         #   pathType: Prefix
  #         #   backendServiceName: someservice
  #         #   backendServicePort: 5555
  #   # tls:
  #   #  - secretName: chart-example-tls
  #   #    hosts:
  #   #      - chart-example.local

## these are for the custom volumes to be mounted
extraVolumes:
extraVolumeMounts:

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsUser: 1724
  runAsGroup: 1724
  fsGroup: 1724

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}