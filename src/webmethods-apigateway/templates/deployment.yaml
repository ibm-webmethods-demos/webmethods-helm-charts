---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "webmethods-apigateway.fullname" . }}
  labels:
    {{- include "webmethods-apigateway.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "webmethods-apigateway.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "webmethods-apigateway.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "webmethods-apigateway.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.waitforelastic.enabled }}
        - name: wait-for-es
          securityContext:
            {{- toYaml .Values.waitforelastic.securityContext | nindent 12 }}
          {{- if .Values.waitforelastic.image.registry }}
          image: {{ printf "%s/%s:%s" .Values.waitforelastic.image.registry .Values.waitforelastic.image.repository (.Values.waitforelastic.image.tag | default .Chart.AppVersion) }}
          {{- else }}
          image: {{ printf "%s:%s" .Values.waitforelastic.image.repository (.Values.waitforelastic.image.tag | default .Chart.AppVersion) }}
          {{- end }}
          imagePullPolicy: {{ .Values.waitforelastic.image.pullPolicy }}
          env:
            {{- if .Values.waitforelastic.uri }}
            - name: ELASTIC_URI
              value: "{{ .Values.waitforelastic.uri }}"
            {{- end }}
            {{- if .Values.waitforelastic.usernameSecret }}
            - name: ELASTIC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.waitforelastic.usernameSecret.name }}"
                  key: "{{ .Values.waitforelastic.usernameSecret.key }}"
            {{- else }}
            {{- if .Values.waitforelastic.username }}
            - name: ELASTIC_USERNAME
              value: "{{ .Values.waitforelastic.username }}"
            {{- end }}
            {{- end }}
            {{- if .Values.waitforelastic.passwordSecret }}
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.waitforelastic.passwordSecret.name }}"
                  key: "{{ .Values.waitforelastic.passwordSecret.key }}"
            {{- end }}
          command:
            - sh
            - -c
            - |
              #!/bin/sh -e
              http () {
                  local path="${1}"
                  if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                    BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                  else
                    BASIC_AUTH=''
                  fi
                  curl -XGET -s -k --fail ${BASIC_AUTH} ${ELASTIC_URI}${path}
              }

              until http "/_cluster/health?wait_for_status=green&timeout=1s"; do
                  echo "waiting for Elasticsearch..."
                  sleep 10;
              done
              echo ""
              echo "Elasticsearch available!"
              exit 0;
        {{- end }}
        {{- with .Values.initContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.image.registry }}
          image: {{ printf "%s/%s:%s" .Values.image.registry .Values.image.repository (.Values.image.tag | default .Chart.AppVersion) }}
          {{- else }}
          image: {{ printf "%s:%s" .Values.image.repository (.Values.image.tag | default .Chart.AppVersion) }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # this block allows us to load a custom script to start the container...
          # but possibly not quite needed
          # command: ["/bin/sh","/opt/softwareag/custom/entrypoint.sh"]
          {{- with .Values.containerPorts }}
          ports:
            - containerPort: {{ int .gwruntime }}
              name: gwruntime
              protocol: TCP
            - containerPort: {{ int .gwruntimessl }}
              name: gwruntimessl
              protocol: TCP
            - containerPort: {{ int .gwui }}
              name: gwui
              protocol: TCP
            - containerPort: {{ int .gwuissl }}
              name: gwuissl
              protocol: TCP
            - containerPort: {{ int .diag }}
              name: diag
              protocol: TCP
            {{- if .isruntime }}
            - containerPort: {{ int .isruntime }}
              name: isruntime
              protocol: TCP
            {{- end }}
          {{- end }}
          startupProbe:
            failureThreshold: 60
            periodSeconds: 15
            httpGet:
              path: /rest/apigateway/health
              port: {{ int .Values.containerPorts.gwruntime }}
              scheme: HTTP
          livenessProbe:
            tcpSocket:
              port: {{ int .Values.containerPorts.gwruntime }}
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            {{- if .Values.advancedHealthCheck }}
            exec:
              command:
              - /bin/bash
              - ./healthcheck.sh
              {{- if include "webmethods-apigateway.isClusteringEnabled" (default "none" ((.Values.clustering).type)) }}
              - {{ default "true" ((.Values.clustering).healthCheck) | quote }}
              {{- end }}            
            {{- else }}
            httpGet:
              path: /rest/apigateway/health
              port: {{ int .Values.containerPorts.gwruntime }}
              scheme: HTTP
            {{- end }}
            failureThreshold: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- if include "webmethods-apigateway.isClusteringTerracotta" (default "none" ((.Values.clustering).type)) }}
            {{- with .Values.clustering }}
            - name: IS_CLUSTER_AWARE
              value: "true"
            {{- if .name }}
            - name: IS_CLUSTER_NAME
              value: "{{ .name }}"
            {{- end }}
            {{- if .sessionTimeout }}
            - name: IS_CLUSTER_SESSTIMEOUT
              value: "{{ .sessionTimeout }}"
            {{- end }}
            {{- if .connectTimeout }}
            - name: IS_CLUSTER_CONNECTTIMEOUT
              value: "{{ .connectTimeout }}"
            {{- end }}
            {{- if .actionOnStartupError }}
            - name: IS_CLUSTER_ACTIONONSTARTUPERROR
              value: "{{ .actionOnStartupError }}"
            {{- end }}
            {{- if (.terracotta).url }}
            - name: IS_CLUSTER_TSAURLS
              value: "{{ (.terracotta).url }}"
            {{- end }}
            {{- end }}
            {{- end }}
            {{- if .Values.connectElasticSearch.enabled }}
            {{- range $name, $value := .Values.connectElasticSearch.configsExistingSecrets }}
            - name: {{ $name | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName | quote }}
                  key: {{ $value.secretKey | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.connectAnalyticsDataStore.enabled }}
            {{- range $name, $value := .Values.connectAnalyticsDataStore.configsExistingSecrets }}
            - name: {{ $name | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretName | quote }}
                  key: {{ $value.secretKey | quote }}
            {{- end }}
            {{- end }}
            {{- with .Values.envConfigs }}
            {{- include "webmethods-apigateway.dictToEnvs" . | indent 12 }}
            {{- end }}
            {{- with .Values.envSecretConfigs }}
            {{- include "webmethods-apigateway.secretsDictToEnvs" . | indent 12 }}
            {{- end }}
            {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: configs-volume
              mountPath: /opt/softwareag/IntegrationServer/packages/WmAPIGateway/resources/configuration
            - name: custom-scripts
              mountPath: /opt/softwareag/custom
            - name: wm-derbydb-volume
              mountPath: /opt/softwareag/IntegrationServer/db
              subPath: wmderbydb
            {{- with .Values.extraVolumeMounts }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
      volumes:
        - name: custom-scripts
          configMap:
            name: {{ include "webmethods-apigateway.fullname" . }}-customscripts
        - name: configs-volume
          configMap:
            name: {{ include "webmethods-apigateway.fullname" . }}
        - name: wm-derbydb-volume
          emptyDir:
            sizeLimit: 5Gi
        {{- with .Values.extraVolumes }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
      {{- with .Values.hostAliases }}
      hostAliases:
      {{- range .hostAliases }}
        - ip: {{ .ip | quote }}
          {{- with .hostnames }}
          hostnames:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}